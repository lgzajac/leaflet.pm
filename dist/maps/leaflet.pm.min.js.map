{"version":3,"sources":["Drag.js","Overlap.js","Snapping.js","L.PM.js","L.PM.Map.js","L.PM.Draw.js","L.PM.Draw.Line.js","L.PM.Edit.js","L.PM.Edit.Line.js","Draw/L.PM.Draw.Circle.js","Draw/L.PM.Draw.Marker.js","Draw/L.PM.Draw.Poly.js","Edit/L.PM.Edit.Circle.js","Edit/L.PM.Edit.LayerGroup.js","Edit/L.PM.Edit.Marker.js","Edit/L.PM.Edit.Poly.js","Toolbar/L.Controls.js","Toolbar/L.PM.Toolbar.js"],"names":["DragMixin","_initDraggableLayer","_tempDragCoord","el","_layer","_path","L","DomUtil","addClass","onMouseUp","_map","dragging","enable","off","_dragging","_initMarkers","window","setTimeout","removeClass","fire","_fireEdit","onMouseMove","e","bringToFront","disable","_markerGroup","clearLayers","_onLayerDrag","on","latlng","deltaLatLng","lat","lng","Circle","setLatLng","redraw","coords","Polygon","_latlngs","newLatLngs","map","currentLatLng","setLatLngs","OverlapMixin","_applyPossibleCoordsChanges","_tempPolygon","latlngs","getLayers","getLatLngs","_poly","_drawTemporaryPolygon","geoJson","setStyle","opacity","fillOpacity","addTo","bringToBack","_handleOverlap","mainPoly","layers","_layerGroup","changed","resultingGeoJson","toGeoJSON","filter","Object","is","layer","intersect","turf","console","warn","difference","geometry","type","remove","SnapMixin","_initSnappableMarkers","options","snapDistance","_markers","forEach","marker","_handleSnapping","_cleanupSnapping","_unsnap","_snapLatLng","_snapList","debugIndicatorLines","line","originalEvent","altKey","undefined","_createSnapList","length","target","closestLayer","_calcClosestLayer","getLatLng","isMarker","Marker","snapLatLng","_checkPrioritiySnapping","minDistance","eventInfo","segment","layerInteractedWith","distance","_onMarkerDrag","A","B","C","distanceAC","_getDistance","distanceBC","closestVertexLatLng","shortestDistance","priorityDistance","snapLatlng","eachLayer","Polyline","push","debugLine","polyline","color","_latlng","_pmTempLayer","index","results","_calcLayerDistances","isPolygon","isPolyline","P","closestSegment","coord","nextIndex","_getDistanceToSegment","_getClosestPointOnSegment","latlngA","latlngB","maxzoom","getMaxZoom","Infinity","getZoom","project","closest","LineUtil","closestPointOnSegment","unproject","latLngToLayerPoint","pointToSegmentDistance","distanceTo","PM","initialize","log","addInitHooks","initLayerGroup","pm","Edit","LayerGroup","addInitHook","initMarker","initCircle","initPolygon","Poly","initPolyline","Line","initMap","Map","Class","extend","Draw","Toolbar","addControls","enableDraw","shape","disableDraw","setPathOptions","removeLayer","_layers","toggleRemoval","enabled","globalEditEnabled","_globalEditMode","toggleGlobalEditMode","templineStyle","hintlineStyle","dashArray","shapes","pathOptions","getShapes","Error","join","addButton","_shape","toolbarButtonName","Util","setOptions","_enabled","_polyline","addLayer","_hintline","_container","style","cursor","_createPolygonPoint","_syncHintLine","toggleButton","toggle","polyPoints","lastPolygonPoint","first","addLatLng","_createMarker","_finishShape","polylineLayer","draggable","icon","divIcon","className","includes","toggleEdit","poly","k","_createMiddleMarker","snappable","_origLatLng","_index","_onMarkerDragStart","_onMarkerDragEnd","_removeMarker","leftM","rightM","_calcMiddleLatLng","middleMarker","middleIcon","setIcon","_middleMarkerNext","_middleMarkerPrev","_addMarker","newM","splice","i","leftMarkerIndex","rightMarkerIndex","m","nextMarkerIndex","prevMarkerIndex","markerLatLng","prevMarkerLatLng","nextMarkerLatLng","middleMarkerNextLatLng","middleMarkerPrevLatLng","markerEvent","edited","latlng1","latlng2","p1","p2","_add","_divideBy","prototype","call","_hintcircle","circle","dist","setRadius","circleOptions","assign","radius","circleLayer","polygonLayer","polygon","gju","handleBearing","gjuStart","coordinates","gjuEnd","destinationPoint","_mRadius","latLngEnd","latLng","layerGroup","findLayers","_initLayer","getOptions","availableEvents","event","_fireEvent","fireEvent","_options","find","_onDragEnd","Control","PMButton","position","_button","onAdd","container","buttonsDomNode","_makeButton","appendChild","onRemove","getText","text","getIconUrl","iconUrl","destroy","_update","toggleStatus","_applyStyleClasses","toggled","onCreate","_triggerClick","onClick","_clicked","afterClick","button","newButton","create","image","setAttribute","DomEvent","addListener","disableOtherButtons","triggerClickOnToggledButtons","disableClickPropagation","doToggle","drawMarker","drawCircle","drawPolygon","drawPolyline","editPolygon","dragPolygon","deleteLayer","buttons","_defineButtons","getButtons","_showHideButtons","_addButton","name","exceptThisButton","status","deleteButton","drawPolyButton","drawMarkerButton","drawCircleButton","drawLineButton","editButton","dragButton","btn","setPosition"],"mappings":"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","file":"../leaflet.pm.min.js","sourcesContent":["const DragMixin = {\n    _initDraggableLayer() {\n        // temporary coord variable for delta calculation\n        this._tempDragCoord = null;\n\n        // add CSS class\n        const el = this._layer._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n\n        const onMouseUp = () => {\n            // re-enable map drag\n            this._layer._map.dragging.enable();\n\n            // clear up mousemove event\n            this._layer._map.off('mousemove');\n\n            // clear up mouseup event\n            this._layer.off('mouseup');\n\n            // if no drag happened, don't do anything\n            if(!this._dragging) {\n                return false;\n            }\n\n            // show markers again\n            this._initMarkers();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(() => {\n                // set state\n                this._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                this._layer.fire('pm:dragend');\n\n                // fire edit\n                this._fireEdit();\n            }, 10);\n\n            return true;\n        };\n\n        const onMouseMove = (e) => {\n            if(!this._dragging) {\n                // set state\n                this._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                this._layer.bringToFront();\n\n                // disbale map drag\n                this._layer._map.dragging.disable();\n\n                // hide markers\n                this._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                this._layer.fire('pm:dragstart');\n            }\n\n            this._onLayerDrag(e);\n        };\n\n        this._layer.on('mousedown', (e) => {\n            // save for delta calculation\n            this._tempDragCoord = e.latlng;\n\n            this._layer.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            this._layer._map.on('mousemove', onMouseMove);\n        });\n    },\n    dragging() {\n        return this._dragging;\n    },\n\n    _onLayerDrag(e) {\n        // latLng of mouse event\n        const latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        const deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng,\n        };\n\n        if (this._layer instanceof L.Circle) {\n            this._layer.setLatLng(latlng).redraw();\n        }\n        else {\n            // create the new coordinates array\n\n            let coords;\n\n            if(this._layer instanceof L.Polygon) {\n                coords = this._layer._latlngs[0];\n            }\n            else {\n                coords = this._layer._latlngs;\n            }\n\n            const newLatLngs = coords.map((currentLatLng) => {\n                return {\n                    lat: currentLatLng.lat + deltaLatLng.lat,\n                    lng: currentLatLng.lng + deltaLatLng.lng,\n                };\n            });\n            // set new coordinates and redraw\n            this._layer.setLatLngs(newLatLngs).redraw();\n\n        }\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // fire pm:dragstart event\n        this._layer.fire('pm:drag');\n    },\n};\n","// this isn't included anymore but if you want to re-enable it:\n// 1. include this mixing inside L.PM.Edit.js\n// 2. include the turf.js dependency in your project before leaflet.pm\n// 3. uncomment all code inside L.PM.Edit.Poly that has an if-check on options.preventOverlap\n// 4. pass the option preventOverlap to the enable() function on your layer\nvar OverlapMixin = {\n\n    _applyPossibleCoordsChanges() {\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if(this._tempPolygon) {\n            // get the new coordinates\n            const latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n    },\n\n    _drawTemporaryPolygon(geoJson) {\n        // hide our polygon\n        this._poly.setStyle({ opacity: 0, fillOpacity: 0 });\n\n        // draw a temporary polygon (happens during drag & intersection)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n    },\n\n    _handleOverlap() {\n        const mainPoly = this._poly;\n        const layers = this._layerGroup.getLayers();\n        let changed = false;\n        let resultingGeoJson = this._poly.toGeoJSON();\n\n        layers\n        .filter(layer => !Object.is(layer, mainPoly))\n        .map((layer) => {\n            let intersect;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch(e) {\n                console.warn('Turf Error.');\n            }\n\n            if(intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if(resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n\n            return true;\n        });\n\n        if(this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if(changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({ opacity: 1, fillOpacity: 0.2 });\n        }\n    },\n};\n","const SnapMixin = {\n    _initSnappableMarkers() {\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        this._markers.forEach((marker) => {\n            marker.off('drag', this._handleSnapping, this);\n            marker.on('drag', this._handleSnapping, this);\n\n            marker.off('dragend', this._cleanupSnapping, this);\n            marker.on('dragend', this._cleanupSnapping, this);\n        });\n\n\n        this._layer.off('pm:dragstart', this._unsnap, this);\n        this._layer.on('pm:dragstart', this._unsnap, this);\n    },\n\n    _unsnap() {\n        // delete the last snap\n        delete this._snapLatLng;\n    },\n    _cleanupSnapping() {\n        // delete it, we need to refresh this with each start of a drag because\n        // meanwhile, new layers could've been added to the map\n        delete this._snapList;\n\n        this.debugIndicatorLines.forEach((line) => {\n            line.remove();\n        });\n    },\n    _handleSnapping(e) {\n        // if snapping is disabled via holding ALT during drag, stop right here\n        if(e.originalEvent.altKey) {\n            return false;\n        }\n\n        // create a list of polygons that the marker could snap to\n        // this isn't inside a movestart/dragstart callback because middlemarkers are initialized\n        // after dragstart/movestart so it wouldn't fire for them\n        if(this._snapList === undefined) {\n            this._createSnapList(e);\n        }\n\n        // if there are no layers to snap to, stop here\n        if(this._snapList.length <= 0) {\n            return false;\n        }\n\n        const marker = e.target;\n\n        // get the closest layer, it's closest latlng, segment and the distance\n        const closestLayer = this._calcClosestLayer(marker.getLatLng(), this._snapList);\n\n        const isMarker = closestLayer.layer instanceof L.Marker;\n\n        // find the final latlng that we want to snap to\n        let snapLatLng;\n        if(!isMarker) {\n            snapLatLng = this._checkPrioritiySnapping(closestLayer);\n        } else {\n            snapLatLng = closestLayer.latlng;\n        }\n\n        // minimal distance before marker snaps (in pixels)\n        const minDistance = this.options.snapDistance;\n\n        // event info for pm:snap and pm:unsnap\n        const eventInfo = {\n            marker,\n            snapLatLng,\n            segment: closestLayer.segment,\n            layer: this._layer,\n            layerInteractedWith: closestLayer.layer, // for lack of a better property name\n        };\n\n        if(closestLayer.distance < minDistance) {\n            // snap the marker\n            marker.setLatLng(snapLatLng);\n\n            // fire onMarkerDrag for pmEditMarkers (vertex markers on polylines/polygons)\n            // TODO: think about how to move this into L.PM.Edit.Line.js, so Snapping.js is\n            // generic for Edit.Marker and Edit.Line\n            if(!(this._layer instanceof L.Marker)) {\n                this._onMarkerDrag(e);\n            }\n\n            // check if the snapping position differs from the last snap\n            if(this._snapLatLng !== snapLatLng) {\n                // if yes, save it and fire the pm:snap event\n                this._snapLatLng = snapLatLng;\n                marker.fire('pm:snap', eventInfo);\n                this._layer.fire('pm:snap', eventInfo);\n            }\n        } else if(this._snapLatLng) {\n            // no more snapping\n\n            // if it was previously snapped...\n            // ...unsnap\n            this._unsnap(eventInfo);\n\n            // and fire unsnap event\n            eventInfo.marker.fire('pm:unsnap', eventInfo);\n            this._layer.fire('pm:unsnap', eventInfo);\n        }\n\n        return true;\n    },\n\n    // we got the point we want to snap to (C), but we need to check if a coord of the polygon\n    // receives priority over C as the snapping point. Let's check this here\n    _checkPrioritiySnapping(closestLayer) {\n        const map = this._layer._map;\n\n        // A and B are the points of the closest segment to P (the marker position we want to snap)\n        const A = closestLayer.segment[0];\n        const B = closestLayer.segment[1];\n\n        // C is the point we would snap to on the segment.\n        // The closest point on the closest segment of the closest polygon to P. That's right.\n        const C = closestLayer.latlng;\n\n        // distances from A to C and B to C to check which one is closer to C\n        const distanceAC = this._getDistance(map, A, C);\n        const distanceBC = this._getDistance(map, B, C);\n\n        // closest latlng of A and B to C\n        const closestVertexLatLng = distanceAC < distanceBC ? A : B;\n\n        // distance between closestVertexLatLng and C\n        const shortestDistance = distanceAC < distanceBC ? distanceAC : distanceBC;\n\n        // the distance that needs to be undercut to trigger priority\n        const priorityDistance = this.options.snapDistance;\n\n        // the latlng we ultemately want to snap to\n        let snapLatlng;\n\n        // if C is closer to the closestVertexLatLng (A or B) than the snapDistance,\n        // the closestVertexLatLng has priority over C as the snapping point.\n        if(shortestDistance < priorityDistance) {\n            snapLatlng = closestVertexLatLng;\n        } else {\n            snapLatlng = closestLayer.latlng;\n        }\n\n        // return the snapping point\n        return snapLatlng;\n    },\n\n    _createSnapList() {\n        let layers = [];\n        const debugIndicatorLines = [];\n\n        // find all layers that are or inherit from Polylines... and markers that are not\n        // temporary markers of polygon-edits\n        this._layer._map.eachLayer((layer) => {\n            if(layer instanceof L.Polyline || layer instanceof L.Marker) {\n                layers.push(layer);\n\n                // this is for debugging\n                const debugLine = L.polyline([], { color: 'red' });\n                debugIndicatorLines.push(debugLine);\n\n                // uncomment 👇 this line to show helper lines for debugging\n                // debugLine.addTo(this._layer._map);\n            }\n        });\n\n        // ...except myself\n        layers = layers.filter(layer => this._layer !== layer);\n\n        // also remove everything that has no coordinates yet\n        layers = layers.filter(layer => layer._latlng || layer._latlngs.length > 0);\n\n        // finally remove everything that's leaflet.pm specific temporary stuff\n        layers = layers.filter(layer => !layer._pmTempLayer);\n\n        this._snapList = layers;\n        this.debugIndicatorLines = debugIndicatorLines;\n    },\n    _calcClosestLayer(latlng, layers) {\n        // the closest polygon to our dragged marker latlng\n        let closestLayer = {};\n\n        // loop through the layers\n        layers.forEach((layer, index) => {\n            // find the closest latlng, segment and the distance of this layer to the dragged marker latlng\n            const results = this._calcLayerDistances(latlng, layer);\n\n            // show indicator lines, it's for debugging\n            this.debugIndicatorLines[index].setLatLngs([latlng, results.latlng]);\n\n            // save the info if it doesn't exist or if the distance is smaller than the previous one\n            if(closestLayer.distance === undefined || results.distance < closestLayer.distance) {\n                closestLayer = results;\n                closestLayer.layer = layer;\n            }\n        });\n\n        // return the closest layer and it's data\n        // if there is no closest layer, return undefined\n        return closestLayer;\n    },\n\n    _calcLayerDistances(latlng, layer) {\n        const map = this._layer._map;\n\n        // is this a polyline, marker or polygon?\n        const isPolygon = layer instanceof L.Polygon;\n        const isPolyline = !(layer instanceof L.Polygon) && layer instanceof L.Polyline;\n        const isMarker = layer instanceof L.Marker;\n\n        // the point P which we want to snap (probpably the marker that is dragged)\n        const P = latlng;\n\n        let coords;\n\n        // the coords of the layer\n        if(isPolygon) {\n            // polygon\n            coords = layer.getLatLngs()[0];\n        } else if(isPolyline) {\n            // polyline\n            coords = layer.getLatLngs();\n        } else if(isMarker) {\n            // marker\n            coords = layer.getLatLng();\n\n            // return the info for the marker, no more calculations needed\n            return {\n                latlng: coords,\n                distance: this._getDistance(map, coords, P),\n            };\n        }\n\n        // the closest segment (line between two points) of the layer\n        let closestSegment;\n\n        // the shortest distance from P to closestSegment\n        let shortestDistance;\n\n        // loop through the coords of the layer\n        coords.forEach((coord, index) => {\n            // take this coord (A)...\n            const A = coord;\n            let nextIndex;\n\n            // and the next coord (B) as points\n            if(isPolygon) {\n                nextIndex = index + 1 === coords.length ? 0 : index + 1;\n            } else {\n                nextIndex = index + 1 === coords.length ? undefined : index + 1;\n            }\n\n            const B = coords[nextIndex];\n\n            if(B) {\n                // calc the distance between P and AB-segment\n                const distance = this._getDistanceToSegment(map, P, A, B);\n\n                // is the distance shorter than the previous one? Save it and the segment\n                if(shortestDistance === undefined || distance < shortestDistance) {\n                    shortestDistance = distance;\n                    closestSegment = [A, B];\n                }\n            }\n\n            return true;\n        });\n\n        // now, take the closest segment (closestSegment) and calc the closest point to P on it.\n        const C = this._getClosestPointOnSegment(map, latlng, closestSegment[0], closestSegment[1]);\n\n        // return the latlng of that sucker\n        return {\n            latlng: C,\n            segment: closestSegment,\n            distance: shortestDistance,\n        };\n    },\n\n    _getClosestPointOnSegment(map, latlng, latlngA, latlngB) {\n        let maxzoom = map.getMaxZoom();\n        if (maxzoom === Infinity) {\n            maxzoom = map.getZoom();\n        }\n        const P = map.project(latlng, maxzoom);\n        const A = map.project(latlngA, maxzoom);\n        const B = map.project(latlngB, maxzoom);\n        const closest = L.LineUtil.closestPointOnSegment(P, A, B);\n        return map.unproject(closest, maxzoom);\n    },\n    _getDistanceToSegment(map, latlng, latlngA, latlngB) {\n        const P = map.latLngToLayerPoint(latlng);\n        const A = map.latLngToLayerPoint(latlngA);\n        const B = map.latLngToLayerPoint(latlngB);\n        return L.LineUtil.pointToSegmentDistance(P, A, B);\n    },\n    _getDistance(map, latlngA, latlngB) {\n        return map.latLngToLayerPoint(latlngA).distanceTo(map.latLngToLayerPoint(latlngB));\n    },\n};\n","/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize() {\n\n        console.log('initing here6')\n\n        this.addInitHooks();\n    },\n    addInitHooks() {\n        function initLayerGroup() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        }\n\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n        function initMarker() {\n            this.pm = new L.PM.Edit.Marker(this);\n        }\n\n        L.Marker.addInitHook(initMarker);\n\n        function initCircle() {\n            console.log('circle hook');\n            this.pm = new L.PM.Edit.Circle(this);\n        }\n\n        L.Circle.addInitHook(initCircle);\n\n        function initPolygon() {\n            this.pm = new L.PM.Edit.Poly(this);\n        }\n\n        L.Polygon.addInitHook(initPolygon);\n\n\n        function initPolyline() {\n            this.pm = new L.PM.Edit.Line(this);\n        }\n\n        L.Polyline.addInitHook(initPolyline);\n\n\n        function initMap() {\n            this.pm = new L.PM.Map(this);\n        }\n\n        L.Map.addInitHook(initMap);\n    },\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n","L.PM.Map = L.Class.extend({\n    initialize(map) {\n        this.map = map;\n        this.Draw = new L.PM.Draw(map);\n        this.Toolbar = new L.PM.Toolbar(map);\n    },\n    addControls(options) {\n        this.Toolbar.addControls(options);\n    },\n    enableDraw(shape = 'Poly', options) {\n        this.Draw.enable(shape, options);\n    },\n    disableDraw(shape = 'Poly') {\n        this.Draw.disable(shape);\n    },\n    setPathOptions(options) {\n        this.Draw.setPathOptions(options);\n    },\n    removeLayer(e) {\n        const layer = e.target;\n        if(!layer._layers && !layer.pm.dragging()) {\n            e.target.remove();\n        }\n    },\n    toggleRemoval(enabled) {\n        if(enabled) {\n            this.map.eachLayer((layer) => {\n                layer.on('click', this.removeLayer);\n            });\n        } else {\n            this.map.eachLayer((layer) => {\n                layer.off('click', this.removeLayer);\n            });\n        }\n    },\n    globalEditEnabled() {\n        return this._globalEditMode;\n    },\n    toggleGlobalEditMode(options) {\n        // find all layers that are or inherit from Polylines...\n        let layers = [];\n        this.map.eachLayer((layer) => {\n            if(layer instanceof L.Polyline || layer instanceof L.Marker || layer instanceof L.Circle) {\n                layers.push(layer);\n            }\n        });\n\n        // filter out layers that don't have the leaflet.pm instance\n        layers = layers.filter(layer => !!layer.pm);\n\n        if(this.globalEditEnabled()) {\n            // disable\n\n            this._globalEditMode = false;\n\n            layers.forEach((layer) => {\n                layer.pm.disable();\n            });\n        } else {\n            // enable\n\n            this._globalEditMode = true;\n\n            layers.forEach((layer) => {\n                layer.pm.enable(options);\n            });\n        }\n    },\n});\n","L.PM.Draw = L.Class.extend({\n    options: {\n        templineStyle: {\n            color: 'red',\n        },\n        hintlineStyle: {\n            color: 'red',\n            dashArray: [5, 5],\n        },\n    },\n    initialize(map) {\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly', 'Line', 'Marker', 'Circle'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape] = new L.PM.Draw[shape](this._map);\n        });\n    },\n    setPathOptions(options) {\n        this.options.pathOptions = options;\n    },\n    getShapes() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enable(shape, options) {\n        if(!shape) {\n            throw new Error(`Error: Please pass a shape as a parameter. Possible shapes are: ${this.getShapes().join(',')}`);\n        }\n\n        // disable drawing for all shapes\n        this.disable();\n\n        // enable draw for a shape\n        this[shape].enable(options);\n    },\n    disable() {\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach((shape) => {\n            this[shape].disable();\n        });\n    },\n    addControls() {\n        // add control buttons for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape].addButton();\n        });\n    },\n});\n","L.PM.Draw.Line = L.PM.Draw.extend({\n    initialize(map) {\n        this._map = map;\n        this._shape = 'Line';\n        this.toolbarButtonName = 'drawPolyline';\n    },\n    enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        // enable draw mode\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], this.options.templineStyle);\n        this._polyline._pmTempLayer = true;\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], this.options.hintlineStyle);\n        this._hintline._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintline);\n\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n    },\n    disable() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if(!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint, this);\n        this._map.off('mousemove', this._syncHintLine, this);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        console.log(this._shape);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n    },\n    enabled() {\n        return this._enabled;\n    },\n    toggle(options) {\n        if(this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _syncHintLine(e) {\n        const polyPoints = this._polyline.getLatLngs();\n\n        if(polyPoints.length > 0) {\n            const lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n    },\n    _createPolygonPoint(e) {\n        // is this the first point?\n        const first = this._polyline.getLatLngs().length === 0;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n    },\n    _finishShape() {\n        // get coordinates, create the leaflet shape and add it to the map\n        const coords = this._polyline.getLatLngs();\n        const polylineLayer = L.polyline(coords, this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polylineLayer,\n        });\n    },\n    _createMarker(latlng) {\n        // create the new marker\n        const marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' }),\n        });\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        // a click on any marker finishes this shape\n        marker.on('click', this._finishShape, this);\n\n        return marker;\n    },\n});\n","L.PM.Edit = L.Class.extend({\n    includes: [DragMixin, SnapMixin]\n});\n","L.PM.Edit.Line = L.PM.Edit.extend({\n    initialize(layer) {\n        this._layer = layer;\n        this._enabled = false;\n    },\n\n    toggleEdit(options) {\n        if(!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable(options = {}) {\n        this.options = options;\n\n        if(!this.enabled()) {\n            // if it was already enabled, disable first\n            // we don't block enabling again because new options might be passed\n            this.disable();\n        }\n\n        // change state\n        this._enabled = true;\n\n        // init markers\n        this._initMarkers();\n\n        // if polygon gets removed from map, disable edit mode\n        this._layer.on('remove', (e) => {\n            this.disable(e.target);\n        });\n\n\n        // preventOverlap needs the turf library. If it's not included, deactivate it again\n        // if(window.turf === undefined && this.options.preventOverlap) {\n        //     console.warn('TurfJS not found, preventOverlap is deactivated');\n        //     this.options.preventOverlap = false;\n        // }\n\n        if(this.options.draggable) {\n            this._initDraggableLayer();\n        }\n\n        // if(this.options.preventOverlap) {\n        //\n        //     // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        //     this._layer.on('pm:drag', this._handleOverlap, this);\n        //\n        //     // set new coordinates, more details inside the function\n        //     this._layer.on('pm:dragend', this._applyPossibleCoordsChanges, this);\n        // }\n    },\n\n    enabled() {\n        return this._enabled;\n    },\n\n    disable(poly = this._layer) {\n        // if it's not enabled, it doesn't need to be disabled\n        if(!this.enabled()) {\n            return false;\n        }\n\n        // prevent disabling if polygon is being dragged\n        if(poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        const el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n\n        return true;\n    },\n\n    _initMarkers() {\n        const map = this._layer._map;\n\n        // cleanup old ones first\n        if(this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        const coords = this._layer._latlngs;\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for(let k = 0; k < coords.length - 1; k += 1) {\n            const nextIndex = k + 1;\n            this._createMiddleMarker(\n                this._markers[k], this._markers[nextIndex]\n            );\n        }\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    // creates initial markers for coordinates\n    _createMarker(latlng, index) {\n        const marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' }),\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n        marker._pmTempLayer = true;\n\n        marker.on('dragstart', this._onMarkerDragStart, this);\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker(leftM, rightM) {\n        const latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        const middleMarker = this._createMarker(latlng);\n        const middleIcon = L.divIcon({ className: 'marker-icon marker-icon-middle' });\n        middleMarker.setIcon(middleIcon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', () => {\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            const icon = L.divIcon({ className: 'marker-icon' });\n            middleMarker.setIcon(icon);\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', () => {\n            // TODO: This is a workaround. Remove the moveend listener and\n            // callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', () => {\n                const icon = L.divIcon({ className: 'marker-icon' });\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker(newM, leftM, rightM) {\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        const latlng = newM.getLatLng();\n        const coords = this._layer._latlngs;\n        const index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map((marker, i) => {\n            marker._index = i;\n            return true;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    _removeMarker(e) {\n        const marker = e.target;\n        const coords = this._layer._latlngs;\n        const index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if(index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if(coords.length < 1) {\n            this._layer.remove();\n        } else {\n            this._layer.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        if(marker._middleMarkerPrev) {\n            this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        }\n        if(marker._middleMarkerNext) {\n            this._markerGroup.removeLayer(marker._middleMarkerNext);\n        }\n\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        const leftMarkerIndex = index - 1 < 0 ? undefined : index - 1;\n        const rightMarkerIndex = index + 1 >= this._markers.length ? undefined : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        // or if the middlemarker would be between the first and last coordinate of a polyline\n        if(rightMarkerIndex && leftMarkerIndex && rightMarkerIndex !== leftMarkerIndex) {\n            const leftM = this._markers[leftMarkerIndex];\n            const rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map((m, i) => {\n            m._index = i;\n            return true;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _onMarkerDrag(e) {\n        // dragged marker\n        const marker = e.target;\n\n        // the dragged markers neighbors\n        const nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        const prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._layer.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        const markerLatLng = marker.getLatLng();\n        const prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        const nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        if(marker._middleMarkerNext) {\n            const middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n            marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n        }\n\n        if(marker._middleMarkerPrev) {\n            const middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n            marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n        }\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        // }\n    },\n\n    _onMarkerDragEnd(e) {\n        // if(this.options.preventOverlap) {\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        this._layer.fire('pm:markerdragend', {\n            markerEvent: e,\n        });\n\n        // fire edit event\n        this._fireEdit();\n    },\n    _onMarkerDragStart(e) {\n        this._layer.fire('pm:markerdragstart', {\n            markerEvent: e,\n        });\n    },\n\n    _fireEdit() {\n        // fire edit event\n        this._layer.edited = true;\n        this._layer.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        const map = this._layer._map;\n        const p1 = map.project(latlng1);\n        const p2 = map.project(latlng2);\n\n        const latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    },\n});\n","L.PM.Draw.Circle =  L.PM.Draw.Line.extend({\n    initialize(map) {\n        this._map = map;\n        this._shape = 'Circle';\n        this.toolbarButtonName = 'drawCircle';\n    },\n    enable(shape, options) {\n        L.PM.Draw.Line.prototype.enable.call(this, shape, options);\n    },\n\n    _createMarker(latlng, first) {\n\n        if (!first) {\n            console.log('second clik')\n\n            this._finishShape();\n        } else {\n            console.log('first clik')\n            this._hintcircle = L.circle(latlng, this.options.hintlineStyle);\n            this._hintcircle._pmTempLayer = true;\n            this._layerGroup.addLayer(this._hintcircle);\n        }\n\n        //ops. ES6 not working.\n        //super._createMarker(latlng, first);\n        return L.PM.Draw.Line.prototype._createMarker.call(this, latlng, first);\n\n    },\n\n    _syncHintLine(e) {\n\n        const polyPoints = this._polyline.getLatLngs();\n\n        if(polyPoints.length > 0) {\n            const lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n\n            const dist = this._map.distance(lastPolygonPoint, e.latlng);\n            //console.log(dist);\n\n            //this._hintcircle.setLatLng(lastPolygonPoint);\n            this._hintcircle.setRadius(dist);\n        }\n\n    },\n\n\n    _finishShape() {\n\n        // disable drawing\n        this.disable();\n\n        // get coordinates, create the leaflet shape and add it to the map\n        const coords = this._polyline.getLatLngs();\n\n        if (coords.length != 2) return;\n\n        const dist = this._map.distance(coords[0], coords[1]);\n\n        const circleOptions = Object.assign({}, this.options.pathOptions, {radius:dist});\n\n        const circleLayer = L.circle(coords[0], circleOptions).addTo(this._map);\n\n        console.log(circleOptions);\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: circleLayer,\n        });\n    }\n});\n","L.PM.Draw.Marker = L.PM.Draw.extend({\n    initialize(map) {\n        this._map = map;\n        this._shape = 'Marker';\n        this.toolbarButtonName = 'drawMarker';\n    },\n    enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        // change enabled state\n        this._enabled = true;\n\n        // create a marker on click on the map\n        this._map.on('click', this._createMarker, this);\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n\n        // enable edit mode for existing markers\n        this._map.eachLayer((layer) => {\n            if(layer instanceof L.Marker) {\n                layer.pm.enable();\n            }\n        });\n    },\n    disable() {\n        // cancel, if drawing mode isn't even enabled\n        if(!this._enabled) {\n            return;\n        }\n\n        // undbind click event, don't create a marker on click anymore\n        this._map.off('click', this._createMarker, this);\n\n        // disable dragging and removing for all markers\n        this._map.eachLayer((layer) => {\n            if(layer instanceof L.Marker) {\n                layer.pm.disable();\n            }\n        });\n\n        // change enabled state\n        this._enabled = false;\n    },\n    enabled() {\n        return this._enabled;\n    },\n    toggle(options) {\n        if(this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _createMarker(e) {\n        // save coords of click\n        const latlng = e.latlng;\n\n        if(!latlng) {\n            return;\n        }\n\n        // create marker\n        const marker = new L.Marker(latlng, {\n            draggable: true,\n        });\n\n        // add marker to the map\n        marker.addTo(this._map);\n\n        // enable editing for the marker\n        marker.pm.enable();\n\n        // fire the pm:create event and pass shape and marker\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            marker,                     // DEPRECATED\n            layer: marker,\n        });\n    },\n});\n","L.PM.Draw.Poly = L.PM.Draw.Line.extend({\n\n    initialize(map) {\n        this._map = map;\n        this._shape = 'Poly';\n        this.toolbarButtonName = 'drawPolygon';\n    },\n    _finishShape() {\n        // get coordinates, create the leaflet shape and add it to the map\n        const coords = this._polyline.getLatLngs();\n        const polygonLayer = L.polygon(coords, this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer,\n        });\n    },\n    _createMarker(latlng, first) {\n        // create the new marker\n        const marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' }),\n        });\n\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        // if the first marker gets clicked again, finish this shape\n        if(first) {\n            marker.on('click', this._finishShape, this);\n        }\n    },\n});\n","\n//TODO connect to library, using geojson-utils for now\n//const LatLonSpherical = require('geodesy').LatLonSpherical;\n\n\nL.PM.Edit.Circle = L.PM.Edit.Line.extend({\n\n    initialize(layer) {\n        this._layer = layer;\n        this._enabled = false;\n        console.log('super edit initialize ', layer)\n\n    },\n\n    _initMarkers() {\n        const map = this._layer._map;\n\n        // cleanup old ones first\n        if(this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        const coords = [this._layer._latlng];\n\n        console.log(gju);\n        //using gju utils / conventions\n        const handleBearing = 90;\n        const gjuStart = {coordinates:[coords[0].lng, coords[0].lat]};\n        const gjuEnd = gju.destinationPoint(gjuStart, handleBearing, this._layer._mRadius/1000);\n\n        const latLngEnd = L.latLng(gjuEnd.coordinates[1],gjuEnd.coordinates[0]);\n\n        coords.push(latLngEnd);\n        console.log(coords, gjuStart, gjuEnd);\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    _onMarkerDrag(e) {\n        // dragged marker\n        const marker = e.target;\n\n        //console.log(marker, this._markers);\n\n        //resize by handles != drag\n        const dist = marker._map.distance(this._markers[0]._latlng, this._markers[1]._latlng);\n        //console.log(dist);\n\n        this._layer.setRadius(dist);\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._layer.redraw();\n\n\n\n    },\n});\n","// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize(layerGroup) {\n        this._layerGroup = layerGroup;\n        this._layers = this.findLayers();\n\n        // init all layers of the group\n        this._layers.forEach(layer => this._initLayer(layer));\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', (e) => {\n            this._layers = this.findLayers();\n\n            // init the newly added layer\n            if(e.layer.pm) {\n                this._initLayer(e.layer);\n            }\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if(e.target.pm.enabled()) {\n                this.enable(this.getOptions());\n            }\n        });\n    },\n    findLayers() {\n        // get all layers of the layer group\n        let layers = this._layerGroup.getLayers();\n\n        // filter out layers that don't have leaflet.pm\n        layers = layers.filter(layer => !!layer.pm);\n\n        // return them\n        return layers;\n    },\n    _initLayer(layer) {\n        // available events\n        const availableEvents = [\n            'pm:edit',\n            'pm:remove',\n            'pm:dragstart',\n            'pm:drag',\n            'pm:dragend',\n            'pm:snap',\n            'pm:unsnap',\n            'pm:raiseMarkers',\n            'pm:markerdragend',\n            'pm:markerdragstart',\n        ];\n\n        // listen to the events of the layers in this group\n        availableEvents.forEach((event) => {\n            layer.on(event, this._fireEvent, this);\n        });\n\n        // add reference for the group to each layer inside said group\n        layer.pm._layerGroup = this._layerGroup;\n    },\n    _fireEvent(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit(options) {\n        this._options = options;\n        this._layers.forEach((layer) => {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable(options) {\n        this._options = options;\n        this._layers.forEach((layer) => {\n            layer.pm.enable(options);\n        });\n    },\n    disable() {\n        this._layers.forEach((layer) => {\n            layer.pm.disable();\n        });\n    },\n    enabled() {\n        const enabled = this._layers.find(layer => layer.pm.enabled());\n        return !!enabled;\n    },\n    dragging() {\n        const dragging = this._layers.find(layer => layer.pm.dragging());\n        return !!dragging;\n    },\n    getOptions() {\n        return this._options;\n    },\n});\n","L.PM.Edit.Marker = L.PM.Edit.extend({\n    initialize(layer) {\n        // layer is a marker in this case :-)\n        this._layer = layer;\n        this._enabled = false;\n\n        // register dragend event e.g. to fire pm:edit\n        this._layer.on('dragend', this._onDragEnd, this);\n    },\n\n    toggleEdit(options) {\n        if(!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable(options = {\n        draggable: true,\n        snappable: true,\n    }) {\n        this.options = options;\n\n        if(this.enabled()) {\n            return;\n        }\n        this._enabled = true;\n\n\n        // enable removal for the marker\n        this._layer.on('contextmenu', this._removeMarker, this);\n\n        // enable dragging and removal for the marker\n        if(this.options.snappable) {\n            this._layer.dragging.enable();\n        }\n\n        // enable snapping\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    enabled() {\n        return this._enabled;\n    },\n\n    disable() {\n        this._enabled = false;\n\n        // disable dragging and removal for the marker\n        this._layer.dragging.disable();\n        this._layer.off('contextmenu', this._removeMarker, this);\n    },\n    _removeMarker(e) {\n        const marker = e.target;\n        marker.remove();\n        marker.fire('pm:remove');\n    },\n    _onDragEnd(e) {\n        const marker = e.target;\n\n        // fire the pm:edit event and pass shape and marker\n        marker.fire('pm:edit');\n    },\n\n    // overwrite initSnappableMarkers from Snapping.js Mixin\n    _initSnappableMarkers() {\n        const marker = this._layer;\n\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        marker.off('drag', this._handleSnapping, this);\n        marker.on('drag', this._handleSnapping, this);\n\n        marker.off('dragend', this._cleanupSnapping, this);\n        marker.on('dragend', this._cleanupSnapping, this);\n\n        marker.off('pm:dragstart', this._unsnap, this);\n        marker.on('pm:dragstart', this._unsnap, this);\n    },\n});\n","L.PM.Edit.Poly = L.PM.Edit.Line.extend({\n\n    _initMarkers() {\n        const map = this._layer._map;\n\n        // cleanup old ones first\n        if(this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        const coords = this._layer._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for(let k = 0; k < coords.length; k += 1) {\n            const nextIndex = k + 1 >= coords.length ? 0 : k + 1;\n            this._createMiddleMarker(\n                this._markers[k], this._markers[nextIndex]\n            );\n        }\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker(newM, leftM, rightM) {\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        const latlng = newM.getLatLng();\n        const coords = this._layer._latlngs[0];\n        const index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map((marker, i) => {\n            marker._index = i;\n            return true;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    _removeMarker(e) {\n        const marker = e.target;\n        const coords = this._layer._latlngs[0];\n        const index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if(index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if(coords.length < 1) {\n            this._layer.remove();\n        } else {\n            this._layer.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        const leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        const rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        if(rightMarkerIndex !== leftMarkerIndex) {\n            const leftM = this._markers[leftMarkerIndex];\n            const rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map((m, i) => {\n            m._index = i;\n            return true;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n    },\n});\n","L.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft',\n    },\n    // TODO: clean up variable names like _button should be _options and that domNodeVariable stuff\n    initialize(options) {\n        this._button = L.Util.setOptions(this, options);\n    },\n\n    onAdd(map) {\n        this._map = map;\n\n        this._container = this._map.pm.Toolbar.container;\n        this.buttonsDomNode = this._makeButton(this._button);\n        this._container.appendChild(this.buttonsDomNode);\n\n        return this._container;\n    },\n\n    onRemove() {\n        this.buttonsDomNode.remove();\n\n        return this._container;\n    },\n\n    getText() {\n        return this._button.text;\n    },\n\n    getIconUrl() {\n        return this._button.iconUrl;\n    },\n\n    destroy() {\n        this._button = {};\n        this._update();\n    },\n\n    toggle(e) {\n        if(typeof e === 'boolean') {\n            this._button.toggleStatus = e;\n        } else {\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n        this._applyStyleClasses();\n\n        return this._button.toggleStatus;\n    },\n    toggled() {\n        return this._button.toggleStatus;\n    },\n    onCreate() {\n        this.toggle(false);\n    },\n    _triggerClick(e) {\n        this._button.onClick(e);\n        this._clicked(e);\n        this._button.afterClick(e);\n    },\n    _makeButton(button) {\n        const newButton = L.DomUtil.create('a', 'leaflet-buttons-control-button', this._container);\n        if(button.toggleStatus) {\n            L.DomUtil.addClass(newButton, 'active');\n        }\n\n        const image = L.DomUtil.create('div', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n        // before the actual click, trigger a click on currently toggled buttons to\n        // untoggle them and their functionality\n        L.DomEvent.addListener(newButton, 'click', () => {\n            if(this._button.disableOtherButtons) {\n                this._map.pm.Toolbar.triggerClickOnToggledButtons(this);\n            }\n        });\n        L.DomEvent.addListener(newButton, 'click', this._triggerClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n    },\n\n    _applyStyleClasses() {\n        if(!this._container) {\n            return;\n        }\n\n        if(!this._button.toggleStatus) {\n            L.DomUtil.removeClass(this.buttonsDomNode, 'active');\n        } else {\n            L.DomUtil.addClass(this.buttonsDomNode, 'active');\n        }\n    },\n\n    _clicked() {\n        if(this._button.doToggle) {\n            this.toggle();\n        }\n        return;\n    },\n\n});\n","/**\n* The Icons used in this Toolbar are CC-BY Glyphicons - http://glyphicons.com/\n*/\n\nL.PM.Toolbar = L.Class.extend({\n    options: {\n        drawMarker: true,\n        drawCircle: true,\n        drawPolygon: true,\n        drawPolyline: true,\n        editPolygon: true,\n        dragPolygon: true,\n        deleteLayer: true,\n        position: 'topleft',\n    },\n    initialize(map) {\n        this.map = map;\n\n        this.buttons = {};\n        this.container = L.DomUtil.create('div', 'leaflet-pm-toolbar leaflet-bar leaflet-control');\n        this._defineButtons();\n    },\n    getButtons() {\n        return this.buttons;\n    },\n\n    addControls(options = this.options) {\n        // adds all buttons to the map specified inside options\n\n        // first set the options\n        L.Util.setOptions(this, options);\n\n        // now show the specified buttons\n        this._showHideButtons();\n    },\n    _addButton(name, button) {\n        this.buttons[name] = button;\n        this.options[name] = this.options[name] || false;\n\n        return this.buttons[name];\n    },\n    triggerClickOnToggledButtons(exceptThisButton) {\n        // this function is used when - e.g. drawing mode is enabled and a possible\n        // other active mode (like removal tool) is already active.\n        // we can't have two active modes because of possible event conflicts\n        // so, we trigger a click on all currently active (toggled) buttons\n        for (const name in this.buttons) {\n            if(this.buttons[name] !== exceptThisButton && this.buttons[name].toggled()) {\n                this.buttons[name]._triggerClick();\n            }\n        }\n    },\n    toggleButton(name, status) {\n        // does not fire the events/functionality of the button\n        // this just changes the state and is used if a functionality (like Draw)\n        // is enabled manually via script\n\n        // as some mode got enabled, we still have to trigger the click on the other buttons\n        // to disable their mode\n        this.triggerClickOnToggledButtons(this.buttons[name]);\n\n        // now toggle the state of the button\n        return this.buttons[name].toggle(status);\n    },\n    _defineButtons() {\n        // some buttons are still in their respective classes, like L.PM.Draw.Poly\n        const deleteButton = {\n            className: 'icon-delete',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                this.map.pm.toggleRemoval(this.buttons.deleteLayer.toggled());\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const drawPolyButton = {\n            className: 'icon-polygon',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                // toggle drawing mode\n                this.map.pm.Draw.Poly.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const drawMarkerButton = {\n            className: 'icon-marker',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                // toggle drawing mode\n                this.map.pm.Draw.Marker.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const drawCircleButton = {\n            className: 'icon-circle',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                // toggle drawing mode\n                this.map.pm.Draw.Circle.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const drawLineButton = {\n            className: 'icon-polyline',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                // toggle drawing mode\n                this.map.pm.Draw.Line.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const editButton = {\n            className: 'icon-edit',\n            onClick: () => {\n            },\n            afterClick: () => {\n                this.map.pm.toggleGlobalEditMode({\n                    snappable: true,\n                    draggable: true,\n                });\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const dragButton = {\n            className: 'icon-drag',\n            onClick: () => {\n            },\n            afterClick: () => {\n\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        this._addButton('drawMarker', new L.Control.PMButton(drawMarkerButton));\n        this._addButton('drawCircle', new L.Control.PMButton(drawCircleButton));\n        this._addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n        this._addButton('drawPolyline', new L.Control.PMButton(drawLineButton));\n        this._addButton('editPolygon', new L.Control.PMButton(editButton));\n        this._addButton('dragPolygon', new L.Control.PMButton(dragButton));\n        this._addButton('deleteLayer', new L.Control.PMButton(deleteButton));\n    },\n\n    _showHideButtons() {\n        // loop through all buttons\n        const buttons = this.getButtons();\n\n        // remove all buttons, that's because the Toolbar can be added again with\n        // different options so it's basically a reset and add again\n        for (const btn in buttons) {\n            buttons[btn].remove();\n        }\n\n        for (const btn in buttons) {\n            if(this.options[btn]) {\n                // if options say the button should be visible, add it to the map\n                buttons[btn].setPosition(this.options.position);\n                buttons[btn].addTo(this.map);\n            }\n        }\n    },\n});\n"]}